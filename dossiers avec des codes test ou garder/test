func submitFormHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		name := r.FormValue("name")
		ingredient := r.FormValue("ingredient")

		// Créez l'URL de recherche de cocktail en utilisant les paramètres d'entrée
		searchByNameURL := fmt.Sprintf("https://www.thecocktaildb.com/api/json/v1/1/search.php?s=%s", url.QueryEscape(name))
		searchByIngredientURL := fmt.Sprintf("https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=%s", url.QueryEscape(ingredient))

		// Effectuez une requête GET pour les cocktails correspondants
		searchByNameRes, err := http.Get(searchByNameURL)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer searchByNameRes.Body.Close()

		searchByIngredientRes, err := http.Get(searchByIngredientURL)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer searchByIngredientRes.Body.Close()

		// Parsez les résultats de la recherche en JSON
		var searchByNameData map[string]interface{}
		err = json.NewDecoder(searchByNameRes.Body).Decode(&searchByNameData)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		var searchByIngredientData map[string]interface{}
		err = json.NewDecoder(searchByIngredientRes.Body).Decode(&searchByIngredientData)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		// Récupérez les résultats de la recherche
		var cocktails []Cocktail

		// Si la recherche par nom de cocktail est fructueuse, récupérez les cocktails correspondants
		if searchByNameData["drinks"] != nil {
			for _, drink := range searchByNameData["drinks"].([]interface{}) {
				d := drink.(map[string]interface{})
				cocktails = append(cocktails, Cocktail{
					Name:           d["strDrink"].(string),
					Instructions:   d["strInstructions"].(string),
					ThumbnailImage: d["strDrinkThumb"].(string),
				})
			}
		}

		// Si la recherche par ingrédient est fructueuse, récupérez les cocktails correspondants
		if searchByIngredientData["drinks"] != nil {
			for _, drink := range searchByIngredientData["drinks"].([]interface{}) {
				d := drink.(map[string]interface{})
				cocktails = append(cocktails, Cocktail{
					Name:           d["strDrink"].(string),
					Instructions:   d["strInstructions"].(string),
					ThumbnailImage: d["strDrinkThumb"].(string),
				})
			}
		}

		// Retournez les résultats de la recherche au format JSON
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(cocktails)
	} else {
		http.Error(w, "La méthode n'est pas autorisée.", http.StatusMethodNotAllowed)
	}
}
